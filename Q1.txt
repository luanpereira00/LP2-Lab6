Classes: Classe é um tipo abstrato de dado definido por um conjunto de atributos e métodos que agem sobre eles. As classes são a abstração de um  conjunto de objetos do mundo real, a fim de representá-los em um ambiente computacional.

Classes Abstratas: Classes abstratas são classes definidas apenas como "template" e/ou para tipagem estática, não podem ser instanciadas e, por tanto, não há tipo dinâmico de classe abstrata. Classes abstratas podem conter tanto métodos concretos como métodos abstratos, no caso dos métodos abstratos, estes devem ser sobreescritos por classes filhas herdeiras. Há uma ressalva que deve ser feita, embora classes abstratas possam conter métodos concretos, o contrário não é verdadeiro, pois caso uma classe concreta contenham um método abstrato, ela não poderá ser instanciada e se tornará uma classe abstrata.

Interfaces: É um recurso da programação orientada à objetos que define ações/métodos que devem ser obrigatoriamente executadas por classes que as ímplemente, porém permite que sejam executadas de formas diferentes entre as classes. Não há o conceito de herança em interface, pois elas definem apenas ações que classes devem conter e por isso não podem ser instanciadas, entretanto, interfaces podem realizar o 'implements' de outras interfaces.

Herança: É um recurso de programação orientada à objetos que é utilizada para permitir que classes compartilhem métodos e atributos através de 'heranças'. É principalmente utilizada para evitar reuso de código. A herança é definida por uma subclasse que 'herda' todos os métodos e atributos de uma superclasse. A subclasse herdeira poderá acessar todos os métodos e atributos com visibilidade diferente de 'private' da superclasse. Além disso, um tipo estático da superclasse poderá receber um tipo dinâmico das suas subclasses.